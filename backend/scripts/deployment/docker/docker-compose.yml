# Production Docker Compose Configuration
# Comprehensive backend services with monitoring and optimization

version: '3.8'

services:
  # === Backend API Service ===
  backend-api:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.backend
    container_name: adult-matching-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - REDIS_URL=redis://redis:6379
      - WORKER_PROCESSES=4
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models
      - ./data:/app/data
    depends_on:
      - redis
      - postgres
    networks:
      - backend-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # === ML Training Service ===
  ml-trainer:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.ml-trainer
    container_name: adult-matching-ml-trainer
    restart: "no"  # On-demand training
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - MODEL_OUTPUT_PATH=/app/models
      - TRAINING_BATCH_SIZE=256
      - EPOCHS=50
      - LEARNING_RATE=0.001
      - EMBEDDING_DIM=768
    volumes:
      - ./models:/app/models
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - postgres
    networks:
      - backend-network
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    profiles:
      - ml-training  # Only start when explicitly requested

  # === Data Processing Service ===
  data-processor:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.data-processor
    container_name: adult-matching-data-processor
    restart: unless-stopped
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - DMM_API_ID=${DMM_API_ID}
      - DMM_AFFILIATE_ID=${DMM_AFFILIATE_ID}
      - PROCESSING_WORKERS=2
      - BATCH_SIZE=1000
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - backend-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # === Redis Cache ===
  redis:
    image: redis:7-alpine
    container_name: adult-matching-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - backend-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  # === PostgreSQL Database ===
  postgres:
    image: pgvector/pgvector:pg15
    container_name: adult-matching-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-adult_matching}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init:/docker-entrypoint-initdb.d
    networks:
      - backend-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # === Monitoring Stack ===
  
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: adult-matching-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - monitoring-network
      - backend-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 512M

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: adult-matching-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - monitoring-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 256M

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: adult-matching-node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring-network
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M

  # === Log Management ===
  
  # ELK Stack - Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: adult-matching-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - logging-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    profiles:
      - logging  # Optional logging stack

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.0
    container_name: adult-matching-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - logging-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 512M
    profiles:
      - logging

  # Logstash for log processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.10.0
    container_name: adult-matching-logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash/config:/usr/share/logstash/config
      - ./logs:/usr/share/logstash/logs
    depends_on:
      - elasticsearch
    networks:
      - logging-network
      - backend-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    profiles:
      - logging

# === Networks ===
networks:
  backend-network:
    driver: bridge
    name: adult-matching-backend
  monitoring-network:
    driver: bridge
    name: adult-matching-monitoring
  logging-network:
    driver: bridge
    name: adult-matching-logging

# === Volumes ===
volumes:
  postgres-data:
    name: adult-matching-postgres-data
  redis-data:
    name: adult-matching-redis-data
  prometheus-data:
    name: adult-matching-prometheus-data
  grafana-data:
    name: adult-matching-grafana-data
  elasticsearch-data:
    name: adult-matching-elasticsearch-data

# === Usage Instructions ===
# 
# Start core services:
#   docker-compose up -d backend-api data-processor
#
# Start with monitoring:
#   docker-compose --profile monitoring up -d
#
# Start with logging:
#   docker-compose --profile logging up -d
#
# Run ML training:
#   docker-compose --profile ml-training run --rm ml-trainer
#
# View logs:
#   docker-compose logs -f backend-api
#
# Scale services:
#   docker-compose up -d --scale backend-api=3
#
# Health check:
#   docker-compose ps
#   curl http://localhost:8000/health